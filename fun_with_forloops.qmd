---
title: "eds221_day3_practice"
author: "Amanda Overbye"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---
```{r}
pinyon_pine <- 14
lodgepole_pine <- 46

#some logical expresssions
pinyon_pine == 10

pinyon_pine < lodgepole_pine

pinyon_pine != 25
```

```{r}
burrito <- 2.4 # Assign an object value

# Write a short 'if' statement:----
if (burrito > 2) {
  print("I love burritos!")
}
```

```{r}
pika <- 89.1
pika

if (pika > 60){
  print("mega pika")
  } else
    print("normal pika")
```

```{r}

marmot <- 2.8 
if (marmot <0.5){ 
  print("small marmot") 
} else if (marmot >= 0.5 & marmot < 3) {
    print("medium marmot")}
} else
    print("a large marmot")

```

```{r}
library(stringr)

my_ships <- c("Millenium Falcon", 
              "X-wing", 
              "Tie-Fighter", 
              "Death Star")
str_detect(my_ships, pattern = "r") # Asks: which elements in the vector contain "r"
```

```{r}
phrase <- "I love burritos"

if (str_detect(phrase, "love")) {
  print("Big burrito fan!")
}
```

```{r}
species = "mouse"

switch(species,
       "cat" = print("Meow"),
       "dog" = print("Woof!"),
       "mouse" = print("Squeak"))
```

```{r}
## doesnt work ----
if (species == "cat") {
print("meow")
}else if (species == "dog")
  print("woof")
  } else (print("neither"))
```

```{r}
dog_names <- c("Teddy", "Khora", "Banjo", "Waffle")

for (pupster in dog_names) {
  print(paste("My dog's name is", pupster))
}
```

```{r}
# Or similarly (\n is for new line):
for (pupster in dog_names) {
  cat("My dog's name is", pupster, "\n")
}
```

```{r}
for (dog in dog_names){
  print(paste0)
}
```


```{r}

data <- data.frame(x = 1:4)
for (i in 1:4) {
  print(data[i])
}
```

```{r}
# Animal types:
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

# And their respective ages in human years:
age_human <- c(3, 8, 4, 6, 12, 18)

# Convert ages to "animal years" using the following:
# 1 human year = 7 in dog years
# 1 human year = 0.88 in elephant years
# 1 human year = 4.7 in goat years

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  print(animal_age)
}
```


```{r}
mass <- seq(from = 0, to = 3, by = 0.5)
#add two to mass and move onto next element
mass_1 <- mass[1]
#body


#for (i in mass) {new_value <- mass_1 + 2
#print(new_value)
  
#}

for (i in mass) {new_value <- i + 2
print(new_value)
  
}

new_value <- mass_1 + 2
print(new_value)

```

```{r}
mass <- seq(from = 0, to = 3, by 5)

#for (i in seq_along(mass)) {
  #new_value <- mass[]

for (i in seq_along(mass)) {
  new_value <- mass[i] + 2
}
```

```{r}
tree_height <- c(1,2,6,10)
#take value and add it to the next vallue
tree_height[1] + tree_height[2]

#for (i in seq_along(tree_height))
# wrong: tree height[i] + tree_height[i +1]
  #the do tree_length(tree_height) in console
  
for (i in seq_along(tree_height)) {
  new_value <- tree_height[i] + tree_height[i + 1]
  print(new_value)
}
```

# for loops with conditions
```{r}

animals <- c("cat", "dog", "dog", "zebra", "dog")

for (i in seq_along(animals)){
if (animals[i] == "dog" ){
  print("i love dogs!")
  } else 
    print("this is not dog")
}
#this worked!!!!!!!
```

```{r}
# Create the animals vector:
animal <- c("cat", "dog", "dog", "zebra", "dog")

# Create the for loop with conditional statement: 
for (i in seq_along(animal)) {
  if (animal[i] == "dog") {
    print("I love dogs!")
  } else
    print("These are other animals!")
}
```

```{r}
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

if (species[1] == "dog"){
  animal_age <- age_human[1] * 7
} else if (species[1] == "elephant") {
    animal_age <- age_human[1] * 0.88 {
      } else if 
  }
}
```


```{r}
# Animal types:
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

# And their respective ages in human years:
age_human <- c(3, 8, 4, 6, 12, 18)

# Convert ages to "animal years" using the following:
# 1 human year = 7 in dog years
# 1 human year = 0.88 in elephant years
# 1 human year = 4.7 in goat years

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  print(animal_age)
}
```

```{r}
# Create the empty vector animal_ages:
animal_ages <- vector(mode = "numeric", length = length(species))

# Vectors with species and human age: 
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

# Same loop as above, with additional piece added
# To populate our empty vector

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  animal_ages[i] <- animal_age # Populate our empty vector
}
```

```{r}
#storing for loop output ----
#create empty vector for animal ages

species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")
animal_ages <- vector(mode = "numeric", length = length(species))


age_human <- c(3, 8, 4, 6, 12, 18)

# Same loop as above, with additional piece added
# To populate our empty vector

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  animal_ages[i] <- animal_age # Populate our empty vector
}

```

```{r}
tigers <- c(29, 34, 82)
lions <- c(2, 18, 6)

big_cats <- vector(mode = "numeric", length = length(tigers))

for (i in seq_along(tigers)) {
  total_cats <- tigers[i] + lions[i]
  big_cats[i] <- total_cats
}
```

```{r}
mean_mtcars <- vector(mode = "numeric", length = )

mean_value <- mean(mtcars[[1]], na.rm = TRUE)

mean_mtcars[i] <- mean_value

for (i in 1:ncol(mtcars)){
  mean_value <- mean(mtcars[[1]], na.rm = TRUE)
  mean_mtcars[i] <- mean_value
} 
```


```{r}
# Create our storage vector
# Note: ncol() returns the number of columns in a data frame
mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))

# Write the loop

for (i in 1:ncol(mtcars)) {
  mean_val <- mean(mtcars[[i]], na.rm = TRUE)
  mean_mtcars[[i]] <- mean_val
}

```

```{r}
penguins <- palmerpenguins::penguins
for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    penguin_med <- median(penguins[[i]], na.rm = TRUE)
    print(penguin_med)
  } else {
    print("non-numeric")
  }
}
```


##mean_value <- mean(mtcars[[1]], na.rm = TRUE)
##mean_mtcars[i] <- mean_value
